{"version":3,"sources":["components/Navbar.js","api/Api.js","components/Mycard.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","AppBar","color","position","Toolbar","IconButton","Typography","variant","API_KEY","Mycard","match","useState","detail","setDetail","open","setOpen","handleClick","id","url","fetch","then","response","json","catch","error","console","log","getMatchDetails","data","handleOpen","handleClose","Card","style","marginTop","CardContent","Grid","container","justify","alignItems","spacing","item","CardActions","Button","onClick","unique_id","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","DialogTitle","DialogContent","DialogContentText","stat","fontStyle","fontWeight","matchStarted","score","DialogActions","App","matches","SetMatches","useEffect","getMatches","alert","className","sm","map","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f46d759.chunk.js","sourcesContent":["import { AppBar,Toolbar,IconButton ,Typography } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport React from \"react\";\r\n\r\n\r\nconst Navbar = () => {\r\nreturn(\r\n    <AppBar color=\"secondary\" position=\"static\">\r\n  <Toolbar>\r\n    <IconButton color=\"inherit\">\r\n       <MenuIcon/>\r\n    </IconButton>\r\n   <Typography variant=\"h6\">Live Score</Typography>\r\n    </Toolbar>\r\n</AppBar>\r\n)\r\n};\r\n\r\nexport default Navbar;","const API_KEY=\"iMfOkvdxv0a9RXiUVTgEHq8Uq6B2\";\r\n\r\n//GET THE UPCOMING MATHCHES\r\n\r\nexport const getMatches = () =>{\r\n    const url=` https://cricapi.com/api/matches?apikey=${API_KEY}`;\r\n\r\n    return fetch(url)\r\n    .then((response) => response.json())\r\n    .catch((error)=>console.log(\"ERROR \",error));\r\n}\r\n\r\n\r\n\r\n// Load match detials\r\n\r\nexport const getMatchDetails=(id)=>{\r\n    const url=` https://cricapi.com/api/cricketScore?apikey=${API_KEY}&unique_id=${id}`;\r\n    return fetch(url)\r\n    .then(response=>response.json())\r\n    .catch(error=>console.log(error));\r\n};\r\n","\r\nimport { Card,CardContent,Typography,Button,CardActions, Grid, Dialog ,DialogTitle,DialogContent,DialogContentText,DialogActions} from \"@material-ui/core\";\r\nimport { Details, ViewStream } from \"@material-ui/icons\";\r\nimport React, { Fragment, useState } from \"react\";\r\nimport { getMatchDetails } from \"../api/Api\";\r\n\r\n\r\nconst Mycard = ({match}) =>{\r\n\r\n    const [detail,setDetail]=useState({});\r\n    const [open,setOpen]=useState(false);\r\n\r\n    const handleClick=(id)=>{\r\n        getMatchDetails(id)\r\n        .then((data)=>{\r\n            setDetail(data);\r\n            handleOpen();\r\n        })\r\n        .catch((error)=> console.log(error));\r\n\r\n    };\r\n\r\n    const getMatchCard = () =>{\r\n        return (\r\n            <Card style={{marginTop:20}}>\r\n                <CardContent>\r\n                    <Grid container justify=\"center\" alignItems=\"center\" spacing={4}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">\r\n                            {match[\"team-1\"]}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h4\" >V/S</Typography>\r\n                      \r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant=\"h5\">\r\n                                {match[\"team-2\"]}\r\n                            </Typography>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Grid container justify=\"center\" >\r\n                    <Button onClick={()=>{\r\n                        handleClick(match.unique_id);\r\n                    }} variant=\"outlined\" color=\"primary\">\r\n                        Show Details\r\n                    </Button>\r\n                    <Button style={{marginLeft:5}} variant=\"outlined\" color=\"primary\">\r\n                        Start Time {new Date(match.dateTimeGMT).toLocaleString()}\r\n                    </Button>\r\n                    </Grid>\r\n                </CardActions>\r\n            </Card>\r\n        )\r\n    };\r\n   \r\n\r\n    const handleClose=()=>{\r\n            setOpen(false);\r\n    };\r\n\r\n    const handleOpen=()=>{\r\n            setOpen(true);\r\n    };\r\n\r\n    const getDialog=()=>(\r\n        <Dialog open={open} onClick={handleClose}>\r\n            <DialogTitle id=\"alert-dialog-title\">\r\n                {\"Match Detail\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    <Typography>\r\n                        {detail.stat}\r\n                    </Typography>\r\n                    <Typography>\r\n                        Match <span style={{fontStyle:\"italic\",fontWeight:\"bold\"}}>{detail.matchStarted?\"Started\":\"Still not Started\"}</span>\r\n                    </Typography>\r\n                    <Typography>\r\n                        Score <span style={{fontStyle:\"italic\",fontWeight:\"bold\"}}>{detail.score}</span>\r\n                    </Typography>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    Close\r\n                </Button>\r\n\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n   \r\n   \r\n    return (\r\n        <Fragment>\r\n       { getMatchCard()}\r\n      {  getDialog()}\r\n    </Fragment>\r\n    );\r\n};\r\n\r\nexport default Mycard;","import React , {Fragment, useEffect ,useState} from \"react\";\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Mycard from './components/Mycard';\nimport {getMatches} from './api/Api';\nimport { Grid } from \"@material-ui/core\";\nimport {Typography} from \"@material-ui/core\";\n\nfunction App() {\n\n  const[matches,SetMatches]= useState([]);\n\n  useEffect(() => {\n    getMatches()\n     .then((data) => SetMatches(data.matches))\n     .catch(error=>alert(\"Error \"));\n  \n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Typography variant=\"h3\">Welcome to live score app</Typography>\n     <Grid container>\n       <Grid sm=\"2\"></Grid>\n       <Grid sm=\"8\">\n       {\n      matches.map((match)=>(\n        <Fragment>\n          {match.type== \"Twenty20\" ? (\n            <Mycard key={match.unique_id} match={match}/>\n            ) :(\n              \"\"\n            )\n            }\n        </Fragment>\n        \n      ))}\n\n       </Grid>\n     </Grid>\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}